Unique dice game:
=================

HackerMan has invented a strange dice game. The game has a set of dice and the dice in the set may have non equal number of faces. Each dice has between 1 and 9 faces, inclusive. If a dice has m faces, it contains precisely all the values between 1 and m, inclusive. More precisely, for each k between 1 and m, inclusive, there is one face that shows exactly k dots. The dice is designed such that each face has an equal probability of coming on top.

To play the game, each time all the dice are thrown at once. The game leader writes down the numbers of dots visible on each of the topmost faces (in any order). The results of the i-th throw are given in throws[i]; the length of throws[i] is equal to the number of dice and each character of throws[i] denotes the number of dots visible on one of the topmost faces. For example, if throws[3][0]='7', this means that in throw 3 (0-based index) one of the dice showed exactly 7 dots on the top. Please note that the ordering of dice may be different for different throws.

Given the notes of the game leader for the throws, determine the minimum possible sum of number of faces on all dice.

Input Formati:

The first line contains an integer N that specifies the number of dice rolls
The first line is followed by N lines, each containing string for the dice roll at that turn
Output Format 
Print a single number, the sum of number of faces on all dice.

Constraints:
1 <= N <= 100 
Length of each string is at max 50.

Sample Input (Plaintext Link):
4
137
364
115
724

Sample Output (Plaintext Link):
14

Explanation:
In the first throw the numbers of dots on the topmost faces of the dice were 1, 3 and 7; in the second throw they were 3, 6 and 4, in the third they were 1, 1 and 5 and in the fourth roll they were 7, 2 and 4. The players may have used dice with 3, 4 and 7 faces, giving a total of 14 faces. No other possible set of dice has less faces in total.

#!/usr/bin/python

def cutdown(sets):
    for s in sets:
        #print s
        tmax = max(s)
        s.remove(tmax) 
    return sets

def club(bicks):
    items = []
    for l in bicks:
        items = items+l 
    #print items
    maximum = max(items)
    return maximum

if __name__ == "__main__":
    nt = int(raw_input())
    throws = []
    for i in range(nt):
        throw = raw_input()
        throws.append(throw)
    nd = len(throws[0])
    st = []
    #print nd, throws
    for j,k in enumerate(throws):
        #print "jk",j,k
        x = 0
        st.append([])
        while x<nd:
            st[j].append(int(k[x]))
            x = x +1
        #print "st", st
    maximum = 0 
    for m in range(nd):
        maximum = maximum + club(st)
        st = cutdown(st)

    print maximum
             
    
